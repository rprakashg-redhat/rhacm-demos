- name: install ACM operators
  hosts: localhost
  tasks:
    - name: import static var data
      include_vars:
        dir: ./vars/static
        ignore_unknown_extensions: True
        extensions:
          - yaml
    
    - name: set docker config json
      command: "oc extract secret/pull-secret -n openshift-config --to=-"
      register: pullsecret

    - name: copy to yaml file
      copy:
        content: "DOCKER_CONFIG_JSON: {{ pullsecret.stdout | to_nice_yaml }}"
        dest: "./vars/dynamic/main.yaml"

    - name: login to cluster
      community.okd.openshift_auth:
        username: "{{ username }}"
        password: "{{ password }}"
        host: "{{ apiserver }}"
        validate_certs: false
      register: ocp_auth_results

    - name: write the token to dynamic vars
      ansible.builtin.lineinfile:
        line: "token: {{ ocp_auth_results.openshift_auth.api_key }}"
        path: "./vars/dynamic/main.yaml"

    - name: import dynamic var data
      include_vars:
        dir: vars/dynamic
        ignore_unknown_extensions: True
        extensions:
          - yaml

    - name: create open cluster management namespace
      kubernetes.core.k8s:
        state: present
        api_key: "{{ token }}"      
        apply: true
        validate_certs: false
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ namespace }}"
          spec: {}

    - name: create the operator group
      kubernetes.core.k8s:
        api_key: "{{ token }}"
        validate_certs: false
        apply: true
        state: present
        resource_definition: "{{ lookup('template', 'templates/operatorgroup.yaml.j2') | from_yaml }}"

    - name: install acm operator
      kubernetes.core.k8s:
        api_key: "{{ token }}"
        validate_certs: false
        apply: true
        state: present
        resource_definition: "{{ lookup('template', 'templates/subscription.yaml.j2') | from_yaml }}"
    
    - name: wait for operator to be ready
      kubernetes.core.k8s_info:
        api_key: "{{ token }}"
        kind: ClusterServiceVersion
        api_version: operators.coreos.com/v1alpha1
        namespace: "{{ namespace }}"
      register: __acm_operator_install_result
      until: "(__acm_operator_install_result['resources'][0]['status']['phase'] is defined) and (__acm_operator_install_result['resources'][0]['status']['phase'] == 'Succeeded')"
      retries: 15
      delay: 15
      
    - name: create generic secret pull secret to be used with multi cluster hub
      command: "oc create secret generic rh-pullsecret -n open-cluster-management --from-literal=.dockerconfigjson='{{ DOCKER_CONFIG_JSON }}' --type=kubernetes.io/dockerconfigjson"

    - name: create multi cluster hub
      kubernetes.core.k8s:
        api_key: "{{ token }}"
        validate_certs: false
        apply: true
        state: present
        resource_definition: "{{ lookup('template', 'templates/hub.yaml.j2') | from_yaml }}"

    - name: wait for the hub to be running
      kubernetes.core.k8s_info:
        api_key: "{{ token }}"
        kind: MultiClusterHub
        name: '{{ hub }}'
        api_version: operator.open-cluster-management.io/v1
        namespace: '{{ namespace }}'
      register: __hub_install_result
      until: "(__hub_install_result['resources'][0]['status']['phase'] is defined) and (__hub_install_result['resources'][0]['status']['phase'] == 'Running')"
      retries: 50
      delay: 20
    
    - name: Install OpenShift GitOps on Hub Cluster
      kubernetes.core.k8s:
        api_key: "{{ token }}"
        validate_certs: false
        apply: true
        state: present
        resource_definition: "{{ lookup('template', 'templates/gitops.yaml.j2') | from_yaml }}"
    
    - name: wait for gitops operator to be ready
      kubernetes.core.k8s_info:
        api_key: "{{ token }}"
        kind: ClusterServiceVersion
        api_version: operators.coreos.com/v1alpha1
        namespace: "openshift-gitops"
      register: __gitops_install_result
      until: "(__gitops_install_result['resources'][0]['status']['phase'] is defined) and (__gitops_install_result['resources'][0]['status']['phase'] == 'Succeeded')"
      retries: 10
      delay: 10      
    